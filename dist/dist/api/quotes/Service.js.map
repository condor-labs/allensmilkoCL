{"version":3,"sources":["../../../api/quotes/Service.js"],"names":["elasticClient","elasticsearch","host","log","apiVersion","requestTimeout","console","QuoteService","quote","Quote","quoteSaved","offset","query","parseInt","limit","body","payload"],"mappings":"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","sourcesContent":["import { Quote } from './Model.js'\nimport elasticsearch from 'elasticsearch';\n\nconst elasticClient = new elasticsearch.Client({\n    host: 'localhost:9200',\n    log: 'trace',\n    apiVersion: '7.2', // use the same version of your Elasticsearch instance\n  });\n\n  elasticClient.ping({\n    // ping usually has a 3000ms timeout\n    requestTimeout: 1000\n  }, function (error) {\n    if (error) {\n      console.trace('elasticsearch cluster is down!');\n    } else {\n      console.log('All is well');\n    }\n  });\n  \nconst QuoteService = {};\n\nQuoteService.createQuote = async(payload) => {\n    try {\n        const quote = new Quote(payload);\n\n        const quoteSaved = await quote.save();\n        console.log(quoteSaved)\n        return quote;\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nQuoteService.getQuotes = async(query) => {\n    try {\n        const offset = query.offset? parseInt(query.offset): 0;\n        const limit = query.limit? parseInt(query.limit): 10;\n        return await Quote.paginate({}, { offset, limit });\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nQuoteService.createManyQuotes = async(payload) => {\n    try {\n        return await Quote.insertMany(payload);\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nQuoteService.ingestManyQuotes = async(payload) => {\n    try {\n        return await elasticClient.bulk({body: payload})\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nexport default QuoteService;"],"file":"Service.js"}