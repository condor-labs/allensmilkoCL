{"version":3,"sources":["../../../api/quotes/Service.js"],"names":["elasticClient","elasticsearch","Client","host","log","apiVersion","ping","requestTimeout","error","console","trace","QuoteService","createQuote","payload","quote","Quote","save","quoteSaved","Error","getQuotes","query","offset","parseInt","limit","paginate","createManyQuotes","insertMany","ingestManyQuotes","bulk","body"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,aAAa,GAAG,IAAIC,0BAAcC,MAAlB,CAAyB;AAC3CC,EAAAA,IAAI,EAAE,gBADqC;AAE3CC,EAAAA,GAAG,EAAE,OAFsC;AAG3CC,EAAAA,UAAU,EAAE,KAH+B,CAGxB;;AAHwB,CAAzB,CAAtB;AAMEL,aAAa,CAACM,IAAd,CAAmB;AACjB;AACAC,EAAAA,cAAc,EAAE;AAFC,CAAnB,EAGG,UAAUC,KAAV,EAAiB;AAClB,MAAIA,KAAJ,EAAW;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAc,gCAAd;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,CAACL,GAAR,CAAY,aAAZ;AACD;AACF,CATD;AAWF,IAAMO,YAAY,GAAG,EAArB;;AAEAA,YAAY,CAACC,WAAb;AAAA,qEAA2B,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,YAAAA,KAFa,GAEL,IAAIC,YAAJ,CAAUF,OAAV,CAFK;AAAA;AAAA,mBAIMC,KAAK,CAACE,IAAN,EAJN;;AAAA;AAIbC,YAAAA,UAJa;AAKnBR,YAAAA,OAAO,CAACL,GAAR,CAAYa,UAAZ;AALmB,6CAMZH,KANY;;AAAA;AAAA;AAAA;AAAA,kBAQb,IAAII,KAAJ,aARa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAYAP,YAAY,CAACQ,SAAb;AAAA,sEAAyB,kBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXC,YAAAA,MAFW,GAEFD,KAAK,CAACC,MAAN,GAAcC,QAAQ,CAACF,KAAK,CAACC,MAAP,CAAtB,GAAsC,CAFpC;AAGXE,YAAAA,KAHW,GAGHH,KAAK,CAACG,KAAN,GAAaD,QAAQ,CAACF,KAAK,CAACG,KAAP,CAArB,GAAoC,EAHjC;AAAA;AAAA,mBAIJR,aAAMS,QAAN,CAAe,EAAf,EAAmB;AAAEH,cAAAA,MAAM,EAANA,MAAF;AAAUE,cAAAA,KAAK,EAALA;AAAV,aAAnB,CAJI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAMX,IAAIL,KAAJ,cANW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAUAP,YAAY,CAACc,gBAAb;AAAA,sEAAgC,kBAAMZ,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEXE,aAAMW,UAAN,CAAiBb,OAAjB,CAFW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAIlB,IAAIK,KAAJ,cAJkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AAQAP,YAAY,CAACgB,gBAAb;AAAA,sEAAgC,kBAAMd,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEXb,aAAa,CAAC4B,IAAd,CAAmB;AAACC,cAAAA,IAAI,EAAEhB;AAAP,aAAnB,CAFW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAIlB,IAAIK,KAAJ,cAJkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;eAQeP,Y","sourcesContent":["import { Quote } from './Model.js'\nimport elasticsearch from 'elasticsearch';\n\nconst elasticClient = new elasticsearch.Client({\n    host: 'localhost:9200',\n    log: 'trace',\n    apiVersion: '7.2', // use the same version of your Elasticsearch instance\n  });\n\n  elasticClient.ping({\n    // ping usually has a 3000ms timeout\n    requestTimeout: 1000\n  }, function (error) {\n    if (error) {\n      console.trace('elasticsearch cluster is down!');\n    } else {\n      console.log('All is well');\n    }\n  });\n  \nconst QuoteService = {};\n\nQuoteService.createQuote = async(payload) => {\n    try {\n        const quote = new Quote(payload);\n\n        const quoteSaved = await quote.save();\n        console.log(quoteSaved)\n        return quote;\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nQuoteService.getQuotes = async(query) => {\n    try {\n        const offset = query.offset? parseInt(query.offset): 0;\n        const limit = query.limit? parseInt(query.limit): 10;\n        return await Quote.paginate({}, { offset, limit });\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nQuoteService.createManyQuotes = async(payload) => {\n    try {\n        return await Quote.insertMany(payload);\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nQuoteService.ingestManyQuotes = async(payload) => {\n    try {\n        return await elasticClient.bulk({body: payload})\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nexport default QuoteService;"],"file":"Service.js"}